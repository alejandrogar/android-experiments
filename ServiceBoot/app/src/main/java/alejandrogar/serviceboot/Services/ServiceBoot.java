package alejandrogar.serviceboot.Services;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Handler;
import android.os.IBinder;
import android.support.v4.app.NotificationCompat;
import android.support.v7.content.res.AppCompatResources;
import android.util.Log;
import android.widget.Toast;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

import alejandrogar.serviceboot.Main;
import alejandrogar.serviceboot.R;

/**
 * Created by Manuel on 06/05/17.
 * <p>
 * Do not edit this file
 */

public class ServiceBoot extends Service implements MqttCallback{

    // Needed for MQTT connection
    MqttClient client;
    String broker = "tcp://iot.eclipse.org:1883";
    String topic        = "topic/groups/messages";
    int qos             = 2;
    String clientId;

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }


    @Override
    public void onCreate() {
        super.onCreate();

        Log.d("SERVICEBOOT", "Servicio creado");

        connectMQTT();
    }

    public void connectMQTT(){
        try {
            clientId = UUID.randomUUID().toString();
            client = new MqttClient(broker, clientId, new MemoryPersistence());
            client.setCallback(this);
            client.connect();
            client.subscribe(topic);

        } catch (MqttException e) {
            e.printStackTrace();
        }
    }


    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d("SERVICEBOOT", "Servicio destruido");
    }

    @Override
    public void connectionLost(Throwable cause) {
        Log.i("Connection status", "Conneection lost, cause" + cause);
        connectMQTT();
    }

    @Override
    public void messageArrived(String topic, MqttMessage message) throws Exception {
        Log.i("From topic: "+ topic,"Message: "+ message);

        JSONObject Message = new JSONObject(), Data = new JSONObject();
        int notificationID = 0;
        try{
            Message = new JSONObject(message.toString());
            Data = new JSONObject(Message.get("data").toString());
            notificationID = Integer.parseInt(Data.getString("id").replace("MSG-", ""));
        }catch(JSONException e){

        }
        Intent intent = new Intent(this, Main.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0 /* Request code */, intent,
                PendingIntent.FLAG_ONE_SHOT);

        Uri defaultSoundUri= RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
        int color = Color.parseColor("#3399ff");
        NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this)
                .setSmallIcon(getNotificationIcon())
                .setContentTitle("MQTT Service")
                .setContentText(Data.getString("message"))
                .setAutoCancel(true)
                .setColor(color)
                .setPriority(Notification.PRIORITY_HIGH)
                .setSound(defaultSoundUri)
                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                .setContentIntent(pendingIntent);
        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        notificationManager.notify(notificationID, notificationBuilder.build());

    }

    @Override
    public void deliveryComplete(IMqttDeliveryToken token) {

    }

    private int getNotificationIcon() {
        boolean useWhiteIcon = (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP);
        return useWhiteIcon ? R.drawable.ic_notification : R.drawable.ic_notification;
    }
}